# Generated by Django 5.1.5 on 2025-05-27 21:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nombre')),
                ('address', models.CharField(max_length=255, verbose_name='Direccion')),
            ],
            options={
                'verbose_name': 'Entidad',
                'verbose_name_plural': 'Entidades',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('MAN', 'Gerente'), ('ENG', 'Ingeniero/a'), ('REP', 'Representante de ventas'), ('ADM', 'Administrativo'), ('BOS', 'Jefe/a de unidad'), ('SUP', 'Supervisor/a'), ('DOC', 'Doctor/a'), ('NUR', 'Enfermero/a'), ('TEN', 'Tens')], max_length=50, verbose_name='Cargo')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AuthUser.entity', verbose_name='Entidad')),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
            },
        ),
        migrations.CreateModel(
            name='SalesRep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('MAN', 'Gerente'), ('ENG', 'Ingeniero/a'), ('REP', 'Representante de ventas'), ('ADM', 'Administrativo'), ('BOS', 'Jefe/a de unidad'), ('SUP', 'Supervisor/a'), ('DOC', 'Doctor/a'), ('NUR', 'Enfermero/a'), ('TEN', 'Tens')], max_length=50, verbose_name='Cargo')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AuthUser.entity', verbose_name='Entidad')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this engineer belongs to.', related_name='salesrep_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this representative.', related_name='salesrep_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Ingeniero',
                'verbose_name_plural': 'Ingenieros',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
